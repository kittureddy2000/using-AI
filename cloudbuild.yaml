options:
  logging: 'CLOUD_LOGGING_ONLY'
  defaultLogsBucketBehavior: 'REGIONAL_USER_OWNED_BUCKET'

steps:
  # Step 1: Print a start message
  - name: 'ubuntu'
    entrypoint: '/bin/bash'
    args: ['-c', 'echo "Starting the build process"']

  # Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/using-ai:$SHORT_SHA', '.']

  # Step 3: Print a message after the build 
  - name: 'ubuntu'
    entrypoint: '/bin/bash'
    args: ['-c', 'echo "Docker build completed"']

  # Step 2: Database Migration
  - name: 'gcr.io/$PROJECT_ID/using-ai:$SHORT_SHA'
    entrypoint: 'bash'
    args: ['-c', 'python manage.py migrate']
    secretEnv: ['DATABASE_URL']

  # Step 3: Collect Static Files
  - name: 'gcr.io/$PROJECT_ID/using-ai:$SHORT_SHA'
    entrypoint: 'bash'
    args: ['-c', 'python manage.py collectstatic --noinput']

  # Push the image to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/using-ai:$SHORT_SHA']

  # Step 5: Print a message after the push
  - name: 'ubuntu'
    entrypoint: '/bin/bash'
    args: ['-c', 'echo "Docker image pushed to Container Registry"']

  # Deploy the image to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['run', 'deploy', 'using-ai', '--image', 'gcr.io/$PROJECT_ID/using-ai:$SHORT_SHA', '--region', 'us-west1', '--platform', 'managed', '--allow-unauthenticated']

  # Step 7: Print a concluding message
  - name: 'ubuntu'
    entrypoint: '/bin/bash'
    args: ['-c', 'echo "Deployment completed"']

images:
  - 'gcr.io/$PROJECT_ID/using-ai:$SHORT_SHA'


secrets:
  - secretEnv:
      DATABASE_URL: 'projects/using-ai-405105/secrets/DATABASE_URL/versions/latest'
