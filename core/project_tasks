TODO
1)Move toggle important and completed to Ajax/Fetch partial page refersh


Info

https://navan.com/get-started



Tasklist Application in Django
1. Application Features and User Interface (UI):
Mobile View:

Display only the task list panel initially.
A hamburger icon on the top-left toggles the categories sidebar.
Clicking a task name opens the edit task form.
Upon saving, the form closes, and the task list panel reappears.
Medium to Large Screens:

Top Bar:
Contains the search bar with a live search box.
Buttons for "Add Task," "Filter," and "Sort" functionalities.
Left Panel (1/3 width):
Displays the categories sidebar.
Clicking a category displays its associated tasks in the task list panel.
Top section: Predefined filters:
"Past Due," "Important," and other significant filters.
Bottom section: Custom user-defined categories.
Right Panel (2/3 width):
Displays the task list for the selected category.
Clicking on a task:
Opens the edit task panel (1/3 width), reducing the task list panel to half its original width.
After saving, the edit task panel closes, and the task list panel restores to its full (2/3) width.
Responsive UI:

Use Bootstrap for responsiveness across devices.
2. Functional Features:
Categories Sidebar:

Predefined filters at the top (e.g., "Past Due," "Important").
Custom user-defined categories below.
Clicking a category dynamically updates the task list on the right.
Task List Panel:

Displays tasks filtered by the selected category.
Clicking a task opens the edit task form.
Task Details View/Edit:

View or edit task details.
Upon save, close the form and refresh the task list.
Live Search (AJAX):

Search bar dynamically filters tasks using AJAX as the user types.
Filter and Sort:

Ability to filter tasks (e.g., "Completed," "Pending," etc.).
Ability to sort tasks by "Due Date," "Importance," etc.
Add Task Categories:

Users can create custom categories for task organization.
File Attachment:

Ability to attach multiple files to each task.
3. Data Model:
Each task will have the following fields:

Task Name
Task Description
Due Date
Reminder Time
Recurrent (boolean for recurring tasks)
Task Completed Status (boolean)
Important (boolean)
User (foreign key for task ownership)
Attachments (support for multiple file uploads)
4. Database Configuration:
Use PostgreSQL hosted in Google Cloud SQL.
5. End-to-End Requirements:
Provide the complete Django code for the application, adhering to best practices.

Code Breakdown:

Models:

Define models for tasks, categories, and file attachments.
Views:

Implement CRUD operations for tasks and categories.
Implement live search using AJAX.
Add functionality for filtering and sorting tasks.
Templates:

Build responsive UI templates using Bootstrap.
Include:
Categories Sidebar
Task List Panel
Task Edit Form
JavaScript (AJAX):

Implement live search for dynamic filtering of tasks.
Update the task list and edit form without full page reloads.
URLs:

Set up URL routing for views (e.g., list tasks, edit tasks, add categories, live search).
Database Configuration:

Provide steps to connect Django to PostgreSQL in Google Cloud SQL.
File Uploads:

Implement support for multiple file attachments per task.
Explanations:

Step-by-step explanation for:
Code structure
Integration of AJAX for live search
Setting up responsiveness with Bootstrap
Connecting to Google Cloud SQL
Best practices for Django development
